class Test::TestCase {
    include Test::Assert

    class Case {
        let init(desc,block) {
            @desc    := desc 
            @block   := block
        }
    }

    class Description inherits Case{
        let execute() {
            try {
                block.call()
            } catch e {
                Test::Runner.current_context().add_description_failure(@desc,e)
            }
        }
    }

    class Assumption inherits Case{
        let execute() { 
            try {
                @block.call()
            } catch e {
                Test::Runner.current_context().add_assumption_failure(@desc,e)
            }
        }
    }

    class APITest inherits Case {
        let execute() {
            try {
                @block.call()
            } catch e {
                Test::Runner.current_context().add_test_failure(@desc,e)
            }
        }
    }

    let self.describe(object,&block) {
        if !object.is_a?(String) then { object := object.to_s() }
        Test::Classes[self].add(new Description(object,block))
    }

    let self.it(assumption,&block) {
        if !assumption.is_a?(String) { 
            raise new ArgumentError("Assumption description must be a string") 
        }
        Test::Classes[self].add(new Assumption(assumption,e)) 
    }

    let self.test(test,&block) {
        if !test.is_a?(String) { 
            raise new ArgumentError("Test description must be a string") 
        }
        Test::Classes[self].add(new APITest(test,block))
    }

}