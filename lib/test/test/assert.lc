module Test::Assert {

    class AssertionError inherits RuntimeError {}

    let self.assert_block(message := "block assertion failed") {
        if !(yield) { raise new AssertionError(message) }
    }
    
    let self.assert(val) {
        assert_block(
            "Expected truthy value but ".concat(val.to_s()," found")
        ) { !!val }
    }

    let self.refute(val) {
        assert_block(
            "Expected falsey value but ".concat(val.to_s()," found")
        ) { !val }
    }

    let self.assert_eq(given,expected) {
        assert_block(
            "".concat(
                expected.to_s(),
                " was expected but ",given.to_s(),
                " was given"
            )
        ) { expected == given }
    }

    let self.assert_not_eq(val1, val2) {
        assert_block(
            "".concat(
                val1.to_s(), " was not expected to be ",val2.to_s()
            )
        ) { val1 != val2 }
    }

    let self.assert_true(val) { 
        assert_block(
            "".concat(val.to_s(), " was expected to be true")
        ) { val == true } 
    }

    let self.assert_false(val) { 
        assert_block(
            "".concat(val.to_s(), " was expected to be false")
        ) { val == false } 
    }

    let self.assert_null(val) {
        assert_block(
            "".concat(val.to_s(), " was expected to be null")
        ) { val == null }
    }

}