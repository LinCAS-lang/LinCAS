/**
*
*  ~~ QUEENS ~~
*
* This implementation solves the problem of
* placing eight queens (chess piece) on a 8x8 chessboard
* so that none of them can capure another one, using 
* the standard rules for those pieces:
* - two queens can't be on the same row or column or
* diagonal
*
* Taken and adapted from https://www.ragni.me/ncalc/solutions/regine
'**/

class Queens
{   
    let get_solution() { return @sol  }
    let get_size()     { return @size }

    let initialize(size := 8, queens := 8)
    { 
        if !(size.is_a? (Integer)) then
            raise new ArgumentError("Size must be an integer")   
        
        if size < 0 then 
            raise new ArgumentError("Size must be positive")     

        if !(queens.is_a? (Integer)) then 
            raise new ArgumentError("Queens must be an integer") 

        if queens < 0 then
            raise new ArgumentError("Queens must be positive")   
        

        @size   := size 
        @queens := queens 
        @sol    := new Array(@size) { new Array(@size) { 0 } }
    }

    let solve()
    {
        if self.place(0) then
            return @sol
        else 
            raise "There is no solution"
    }

    let place(queen)
    {
        return false if (@size <= 3) && (@size <= @queens)
        return true  if queen == @queens

        (0...@size).each do { |row|
            if self.place? row, queen then
            {
                @sol[row][queen] := 1
                return  true if self.place(queen + 1)
                @sol[row][queen] := 0
            }
        }
        return false
    }

    let place?(row,col)
    {
        (0...@size).each do { |i|
            return false if @sol[row][i] == 1
        }

        q1 := row - col 
        q2 := row + col 
        (0...@size).each do { |i|
            if (0...@size).include? (i + q1) then
                return false if @sol[i + q1][i] == 1

            if (0...@size).include? (i - q2) then
                return false if @sol[i - q2][i] == 1
        }
        return true
    }

} /* end Queens */

const queens := 8

r := new Queens(queens,queens).solve()

r.each() { |row|
    row.map! { |el| 
        if el == 1 then 
            next "Q" 
        else 
            next "*"
    }
    printl row.join(",")
}







